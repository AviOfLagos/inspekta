generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String             @id @default(cuid())
  email              String             @unique
  emailVerified      DateTime?
  name               String?
  phone              String?
  image              String?
  role               UserRole
  verificationStatus VerificationStatus @default(PENDING)
  ninNumber          String?
  bvnNumber          String?
  companyId          String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  username           String?            @unique
  password           String?
  accounts           Account[]
  agentProfile       AgentProfile?
  clientProfile      ClientProfile?
  earnings           Earning[]
  inquiries          Inquiry[]
  inspections        Inspection[]
  inspectionClients  InspectionClient[]
  inspectorProfile   InspectorProfile?
  listings           Listing[]
  notifications      Notification[]
  payments           Payment[]
  payouts            Payout[]
  referrals          Referral[]
  savedListings      SavedListing[]
  sessions           Session[]
  subscriptions      Subscription[]
  uploadedFiles      UploadedFile[]
  company            Company?           @relation(fields: [companyId], references: [id])
}

model Company {
  id                 String             @id @default(cuid())
  name               String
  subdomain          String             @unique
  customDomain       String?
  logo               String?
  description        String?
  cacNumber          String?
  verificationStatus VerificationStatus @default(PENDING)
  subscriptionTier   String             @default("BASIC")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  earnings           Earning[]
  inspections        Inspection[]
  listings           Listing[]
  users              User[]
}

model ClientProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  preferredLocation String?
  budgetMin         Float?
  budgetMax         Float?
  propertyType      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  guarantor1Name  String?
  guarantor1Phone String?
  guarantor2Name  String?
  guarantor2Phone String?
  listingCount    Int      @default(0)
  successfulDeals Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InspectorProfile {
  id                 String                  @id @default(cuid())
  userId             String                  @unique
  location           String?
  availabilityRadius Float?
  rating             Float?                  @default(0)
  inspectionCount    Int                     @default(0)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  availabilities     InspectorAvailability[]
  user               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id            String         @id @default(cuid())
  title         String
  description   String
  type          PropertyType
  status        ListingStatus  @default(ACTIVE)
  address       String
  city          String
  state         String
  latitude      Float?
  longitude     Float?
  price         Float
  currency      String         @default("NGN")
  bedrooms      Int?
  bathrooms     Int?
  area          Float?
  images        String[]
  videoUrl      String?
  agentId       String
  companyId     String?
  featured      Boolean        @default(false)
  tier          String         @default("BASIC")
  referralCode  String         @unique @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  inquiries     Inquiry[]
  inspections   Inspection[]
  agent         User           @relation(fields: [agentId], references: [id])
  company       Company?       @relation(fields: [companyId], references: [id])
  referrals     Referral[]
  savedBy       SavedListing[]
  uploadedFiles UploadedFile[]
}

model Inspection {
  id           String             @id @default(cuid())
  type         InspectionType
  status       InspectionStatus   @default(SCHEDULED)
  scheduledAt  DateTime
  duration     Int                @default(30)
  listingId    String
  inspectorId  String?
  companyId    String?
  meetingUrl   String?
  recordingUrl String?
  fee          Float?
  paid         Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  earnings     Earning[]
  company      Company?           @relation(fields: [companyId], references: [id])
  inspector    User?              @relation(fields: [inspectorId], references: [id])
  listing      Listing            @relation(fields: [listingId], references: [id])
  clients      InspectionClient[]
  payments     Payment[]
}

model InspectionClient {
  id           String     @id @default(cuid())
  inspectionId String
  clientId     String
  interested   Boolean    @default(false)
  notes        String?
  createdAt    DateTime   @default(now())
  client       User       @relation(fields: [clientId], references: [id])
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  @@unique([inspectionId, clientId])
}

model Referral {
  id            String   @id @default(cuid())
  code          String   @unique
  referrerId    String
  listingId     String
  clicks        Int      @default(0)
  conversions   Int      @default(0)
  totalEarnings Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  listing       Listing  @relation(fields: [listingId], references: [id])
  referrer      User     @relation(fields: [referrerId], references: [id])
}

model Earning {
  id           String      @id @default(cuid())
  type         EarningType
  amount       Float
  currency     String      @default("NGN")
  userId       String
  companyId    String?
  inspectionId String?
  paid         Boolean     @default(false)
  paidAt       DateTime?
  platformCut  Float       @default(0.1)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  company      Company?    @relation(fields: [companyId], references: [id])
  inspection   Inspection? @relation(fields: [inspectionId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String           @id @default(cuid())
  type      SubscriptionType
  userId    String
  amount    Float
  currency  String           @default("NGN")
  active    Boolean          @default(true)
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  payments  Payment[]
  user      User             @relation(fields: [userId], references: [id])
}

model UploadedFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  url          String   @unique
  size         Int
  mimeType     String
  type         FileType
  uploadedById String
  propertyId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  property     Listing? @relation(fields: [propertyId], references: [id])
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
}

model Inquiry {
  id        String        @id @default(cuid())
  message   String
  status    InquiryStatus @default(NEW)
  listingId String
  clientId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  client    User          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  listing   Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model SavedListing {
  id        String   @id @default(cuid())
  notes     String?
  listingId String
  userId    String
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([listingId, userId])
}

model InspectorAvailability {
  id                 String           @id @default(cuid())
  inspectorProfileId String
  date               DateTime
  isAvailable        Boolean          @default(true)
  startTime          DateTime
  endTime            DateTime
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  inspectorProfile   InspectorProfile @relation(fields: [inspectorProfileId], references: [id], onDelete: Cascade)

  @@unique([inspectorProfileId, date])
}

model Payment {
  id               String        @id @default(cuid())
  amount           Float
  currency         String        @default("NGN")
  status           PaymentStatus @default(PENDING)
  paymentGatewayId String?       @unique
  userId           String
  inspectionId     String?
  subscriptionId   String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  inspection       Inspection?   @relation(fields: [inspectionId], references: [id])
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
}

model Payout {
  id        String       @id @default(cuid())
  amount    Float
  currency  String       @default("NGN")
  status    PayoutStatus @default(PENDING)
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
}

model Notification {
  id           String           @id @default(cuid())
  type         NotificationType
  title        String
  message      String
  read         Boolean          @default(false)
  userId       String
  inspectionId String?
  listingId    String?
  paymentId    String?
  metadata     Json?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CLIENT
  AGENT
  INSPECTOR
  COMPANY_ADMIN
  PLATFORM_ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum PropertyType {
  APARTMENT
  HOUSE
  DUPLEX
  OFFICE
  SHOP
  WAREHOUSE
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  RENTED
  REMOVED
}

enum InspectionType {
  VIRTUAL
  PHYSICAL
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EarningType {
  INSPECTION_FEE
  REFERRAL_BONUS
  SUBSCRIPTION_COMMISSION
  RENT_COMMISSION
}

enum SubscriptionType {
  INSPECTION_MONTHLY
  AGENT_MONTHLY
  COMPANY_MONTHLY
}

enum FileType {
  IMAGE
  DOCUMENT
  VIDEO
}

enum InquiryStatus {
  NEW
  READ
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PROCESSED
  FAILED
}

enum NotificationType {
  INSPECTION_SCHEDULED
  INSPECTION_ACCEPTED
  INSPECTION_COMPLETED
  INSPECTION_CANCELLED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  INQUIRY_RECEIVED
  LISTING_SAVED
  VERIFICATION_APPROVED
  VERIFICATION_REJECTED
  GENERAL
}
